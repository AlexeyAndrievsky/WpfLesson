#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfLesson.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WpfLessonData")]
	public partial class WpfLessonDBClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDbDepartment(DbDepartment instance);
    partial void UpdateDbDepartment(DbDepartment instance);
    partial void DeleteDbDepartment(DbDepartment instance);
    partial void InsertDbEmployer(DbEmployer instance);
    partial void UpdateDbEmployer(DbEmployer instance);
    partial void DeleteDbEmployer(DbEmployer instance);
    #endregion
		
		public WpfLessonDBClassesDataContext() : 
				base(global::WpfLesson.DataAccess.Properties.Settings.Default.WpfLessonDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WpfLessonDBClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WpfLessonDBClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WpfLessonDBClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WpfLessonDBClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DbDepartment> DbDepartments
		{
			get
			{
				return this.GetTable<DbDepartment>();
			}
		}
		
		public System.Data.Linq.Table<DbEmployer> DbEmployers
		{
			get
			{
				return this.GetTable<DbEmployer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class DbDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Department;
		
		private string _DeptName;
		
		private string _DeptInfo;
		
		private EntitySet<DbEmployer> _DbEmployers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_DepartmentChanging(int value);
    partial void OnId_DepartmentChanged();
    partial void OnDeptNameChanging(string value);
    partial void OnDeptNameChanged();
    partial void OnDeptInfoChanging(string value);
    partial void OnDeptInfoChanged();
    #endregion
		
		public DbDepartment()
		{
			this._DbEmployers = new EntitySet<DbEmployer>(new Action<DbEmployer>(this.attach_DbEmployers), new Action<DbEmployer>(this.detach_DbEmployers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Department", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Department
		{
			get
			{
				return this._Id_Department;
			}
			set
			{
				if ((this._Id_Department != value))
				{
					this.OnId_DepartmentChanging(value);
					this.SendPropertyChanging();
					this._Id_Department = value;
					this.SendPropertyChanged("Id_Department");
					this.OnId_DepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptName", DbType="NVarChar(255)")]
		public string DeptName
		{
			get
			{
				return this._DeptName;
			}
			set
			{
				if ((this._DeptName != value))
				{
					this.OnDeptNameChanging(value);
					this.SendPropertyChanging();
					this._DeptName = value;
					this.SendPropertyChanged("DeptName");
					this.OnDeptNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptInfo", DbType="NVarChar(MAX)")]
		public string DeptInfo
		{
			get
			{
				return this._DeptInfo;
			}
			set
			{
				if ((this._DeptInfo != value))
				{
					this.OnDeptInfoChanging(value);
					this.SendPropertyChanging();
					this._DeptInfo = value;
					this.SendPropertyChanged("DeptInfo");
					this.OnDeptInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbDepartment_Employer", Storage="_DbEmployers", ThisKey="Id_Department", OtherKey="Id_Department")]
		public EntitySet<DbEmployer> DbEmployers
		{
			get
			{
				return this._DbEmployers;
			}
			set
			{
				this._DbEmployers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DbEmployers(DbEmployer entity)
		{
			this.SendPropertyChanging();
			entity.DbDepartment = this;
		}
		
		private void detach_DbEmployers(DbEmployer entity)
		{
			this.SendPropertyChanging();
			entity.DbDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employers")]
	public partial class DbEmployer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Employee;
		
		private string _EmpSurname;
		
		private string _EmpName;
		
		private string _EmpSecondName;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private int _Id_Department;
		
		private System.Nullable<decimal> _Salary;
		
		private EntityRef<DbDepartment> _DbDepartment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_EmployeeChanging(int value);
    partial void OnId_EmployeeChanged();
    partial void OnEmpSurnameChanging(string value);
    partial void OnEmpSurnameChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnEmpSecondNameChanging(string value);
    partial void OnEmpSecondNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnId_DepartmentChanging(int value);
    partial void OnId_DepartmentChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    #endregion
		
		public DbEmployer()
		{
			this._DbDepartment = default(EntityRef<DbDepartment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Employee", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Employee
		{
			get
			{
				return this._Id_Employee;
			}
			set
			{
				if ((this._Id_Employee != value))
				{
					this.OnId_EmployeeChanging(value);
					this.SendPropertyChanging();
					this._Id_Employee = value;
					this.SendPropertyChanged("Id_Employee");
					this.OnId_EmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpSurname", DbType="NVarChar(255)")]
		public string EmpSurname
		{
			get
			{
				return this._EmpSurname;
			}
			set
			{
				if ((this._EmpSurname != value))
				{
					this.OnEmpSurnameChanging(value);
					this.SendPropertyChanging();
					this._EmpSurname = value;
					this.SendPropertyChanged("EmpSurname");
					this.OnEmpSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpName", DbType="NVarChar(255)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpSecondName", DbType="NVarChar(255)")]
		public string EmpSecondName
		{
			get
			{
				return this._EmpSecondName;
			}
			set
			{
				if ((this._EmpSecondName != value))
				{
					this.OnEmpSecondNameChanging(value);
					this.SendPropertyChanging();
					this._EmpSecondName = value;
					this.SendPropertyChanged("EmpSecondName");
					this.OnEmpSecondNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Department", DbType="Int NOT NULL")]
		public int Id_Department
		{
			get
			{
				return this._Id_Department;
			}
			set
			{
				if ((this._Id_Department != value))
				{
					if (this._DbDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_DepartmentChanging(value);
					this.SendPropertyChanging();
					this._Id_Department = value;
					this.SendPropertyChanged("Id_Department");
					this.OnId_DepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Money")]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DbDepartment_Employer", Storage="_DbDepartment", ThisKey="Id_Department", OtherKey="Id_Department", IsForeignKey=true)]
		public DbDepartment DbDepartment
		{
			get
			{
				return this._DbDepartment.Entity;
			}
			set
			{
				DbDepartment previousValue = this._DbDepartment.Entity;
				if (((previousValue != value) 
							|| (this._DbDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DbDepartment.Entity = null;
						previousValue.DbEmployers.Remove(this);
					}
					this._DbDepartment.Entity = value;
					if ((value != null))
					{
						value.DbEmployers.Add(this);
						this._Id_Department = value.Id_Department;
					}
					else
					{
						this._Id_Department = default(int);
					}
					this.SendPropertyChanged("DbDepartment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
